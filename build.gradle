plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

// Constants
ext {
    project_name = 'Liberium'
    project_version_suffix = System.properties['versionsuf'] != null ? System.properties['versionsuf'].toString() : ""
    project_version = (System.properties['version'] != null ? System.properties['version'].toString() : "1.1.0") + project_version_suffix
    project_description = 'Spigot library to make plugin coding fun and easier'
    project_url = 'https://kraftics.com/liberium'
    project_jdk = '1.8'

    project_group = 'com.kraftics'

    isRelease = !project_version.toString().contains('snapshot')
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = project_group
    version = project_version
    description = project_description

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    repositories {
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    }

    dependencies {
        compile 'org.jetbrains:annotations:23.0.0'
        compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

        testImplementation 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()

        ignoreFailures true
    }

    // Configuring jars

    jar {
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

subprojects {
    archivesBaseName = "liberium-$project.name"

    // Maven central publishing

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId = archivesBaseName
                groupId = 'com.kraftics'
                version = project_version

                pom {
                    name = 'Liberium'
                    description = project_description
                    url = 'https://github.com/KrafticsTeam/Liberium'

                    organization {
                        name = 'KrafticsTeam'
                        url = 'https://kraftics.com'
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/KrafticsTeam/Liberium/blob/master/LICENSE'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/KrafticsTeam/Liberium'
                        connection = 'scm:git:git://github.com/KrafticsTeam/Liberium.git'
                        developerConnection = 'scm:git:ssh://git@github.com:KrafticsTeam/Liberium.git'
                    }

                    developers {
                        developer {
                            name = 'KrafticsTeam'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                if (isRelease) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                }

                def sonatypeUsername = findProperty('sonatypeUsername')
                def sonatypePassword = findProperty('sonatypePassword')

                if (sonatypeUsername != null && sonatypePassword != null) {
                    credentials {
                        username = sonatypeUsername
                        password = sonatypePassword
                    }
                }
            }
        }
    }

    if (isRelease) {
        signing {
            sign publishing.publications.mavenJava
        }
    }
}

// Removing the parent build dir

tasks['build'].doLast {
    buildDir.deleteDir()
}

tasks['jar'].doLast {
    buildDir.deleteDir()
}
